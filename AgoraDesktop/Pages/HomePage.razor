@page "/home"

@using Microsoft.AspNetCore.SignalR.Client;
@using System.Windows;

<h3>Home</h3>

<ul id="list-area">
    @foreach (var process in displayList)
    {
        <li id="list-tab">@process</li>
    }
</ul>


@code {
    private HubConnection? connection;
    private List<string> processInfoList = new List<string>();
    
    private List<string> displayList = new List<string>();
    MainWindow mainWindow = Application.Current.Windows.OfType<MainWindow>().FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {

        // Set up the local connection to the hub with automatic reconnecting.
        connection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7142/userhub")
            .WithAutomaticReconnect()
            .Build();

        connection.On<List<CustomCollection>>("UpdateList", (activities) =>
        {
        // get the current list of active processes to be displayed on the home page.
            
            processInfoList.Clear();
            ConvertToListStrings(activities);
            this.displayList = processInfoList;
            InvokeAsync(StateHasChanged);
        });

        await connection.StartAsync();

        

        if ((App.Current as App) != null && (App.Current as App).UserName != null)
        {
            await connection.SendAsync("SetConnectionId", (App.Current as App).UserName);
            await connection.SendAsync("GetCurrentApplications", (App.Current as App).UserName);
        }
        else
        {
            return;
        }

    }

    // Covert the list of "CustomCollection" types to a list of strings that represents a programs name
    // Add it's current timer
    private void ConvertToListStrings(List<CustomCollection> listOfActivities)
    {
        for (int i = 0; i < listOfActivities.Count; i++)
        {
            string appName = listOfActivities[i].WindowName;
            
            double appTime = listOfActivities[i].TotalTime + (DateTime.Now - listOfActivities[i].StartTime).TotalMilliseconds;
            // convert appTime to a representation of the amount of hours, minutes, and secodns that have passed.
            double integerRep = Math.Floor(appTime / 60000);
            int hours = (int)Math.Floor(integerRep / 60);
            int minutes = (int)integerRep % 60;
            string hourString;
            string minuteString;
            if (IntegerDegrees(hours) <= 1)
            {
                hourString = "0" + hours.ToString();
            }
            else
            {
                hourString = hours.ToString();
            }
            if (IntegerDegrees(minutes) <= 1)
            {
                minuteString = "0" + minutes.ToString();
            }
            else
            {
                minuteString = minutes.ToString();
            }
            processInfoList.Add(listOfActivities[i].WindowName + " - " + hourString + ":" + minuteString);
            
        }
    }

    private int IntegerDegrees(int time)
    {
        if ((time % 10) == time)
        {
            return 1;
        }
        else
        {
            return 1 + IntegerDegrees(time % 10);
        }
    }
}

