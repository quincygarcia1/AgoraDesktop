@page "/home"

@using Microsoft.AspNetCore.SignalR.Client;
@using System.Windows;
@using System.Net.Sockets;
@using System.Net
@using System.Text
@using System.Threading
@using System.Collections

<h3>Home</h3>

<ul id="list-area">
    @foreach (var process in displayList)
    {
        <li id="list-tab">@process</li>
    }
</ul>


@code {
    private static byte[] _buffer = new byte[1024];
    private Socket _connection = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    bool inUse = false;
    static string[] currentServerCommmand = null;

    private string[] displayList = {};
    MainWindow mainWindow = Application.Current.Windows.OfType<MainWindow>().FirstOrDefault();

    protected override async Task OnInitializedAsync()
    {
        // Set up the local connection to the hub with automatic reconnecting.
        while (!_connection.Connected)
        {
            try
            {
                _connection.Connect(IPAddress.Loopback, 7313);
            }
            catch
            {

            }
        }
        
        if ((App.Current as App) != null && (App.Current as App).UserName != null)
        {
            if (_connection.Connected)
            {
                byte[] buf = Encoding.ASCII.GetBytes("SetConnectionId-" + (App.Current as App).UserName + "\r\n");
                _connection.Send(buf);


                byte[] callBuf = Encoding.ASCII.GetBytes("GetCurrentApplications-" + (App.Current as App).UserName + "\r\n");
                _connection.Send(callBuf);

            }
        }
        else
        {
            return;
        }
        Thread serverHandling = new Thread(GetServerInput);
        serverHandling.Start();
    }

    private void UpdateList(string[] updatedList)
    {
        this.displayList = updatedList;
        InvokeAsync(StateHasChanged);
    }

    private int IntegerDegrees(int time)
    {
        if ((time % 10) == time)
        {
            return 1;
        }
        else
        {
            return 1 + IntegerDegrees(time % 10);
        }
    }

    private void GetServerInput()
    {
        while (_connection.Connected)
        {
            ArrayList soclist = new ArrayList()
            {
                _connection
            };
            inUse = true;
            Socket.Select(soclist, null, null, -1);
            if (soclist.Count == 0)
            {
                inUse = false;
                continue;
            }
            // Convert this to begin receive.
            _connection.BeginReceive(_buffer, 0, _buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), _connection);
            if (currentServerCommmand != null)
            {
                UpdateList(currentServerCommmand);
            }
            inUse = false;
        }
    }

    private static void ReceiveCallback(IAsyncResult ar)
    {
        Socket soc = (Socket)ar.AsyncState;
        int dataReceived;
        try
        {
            dataReceived = soc.EndReceive(ar);
        }
        catch
        {
            return;
        }


        if (dataReceived == 0){
            return;
        }

        byte[] tempBuf = new byte[dataReceived];
        Array.Copy(_buffer, tempBuf, dataReceived);
        string result = Encoding.ASCII.GetString(tempBuf);

        int dashIndex = result.IndexOf("-");
        if (dashIndex == -1 || dashIndex + 1 > result.Length)
        {
            return;
        }
        string processInfo = result.Substring(dashIndex + 1);
        string handlingMethod = result.Substring(0, dashIndex);

        if (handlingMethod[0] == 'U')
        {
            string[] listOfProcesses = processInfo.Split(" $^% ");
            currentServerCommmand = listOfProcesses;
        }
    }
}

