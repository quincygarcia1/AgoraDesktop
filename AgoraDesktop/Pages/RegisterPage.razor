@page "/registerPage"
@layout EmptyLayout
@inject NavigationManager NavManager
@using Models
@using System.Windows
@using System.Net.Http.Headers;
@using System.Net.Http;
@using System.Net;

<div class="login-form">
    <EditForm Model="@formModel" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <legend class="login-text">Create Account</legend>
        <div class="field-section">
            <label>Username:</label><InputText class="input-field username-box" @bind-Value="formModel.Username" />
        </div>
    
        <div class="field-section">
            <label>Password:</label><InputText class="input-field password-box" type="password" @bind-Value="formModel.Password" />
        </div>

        <div class="field-section">
            <label>Confirm Password:</label><InputText class="input-field password-box" type="password" @bind-Value="formModel.ConfirmPassword" />
        </div>
    

        <button class="submit" type="submit" style="margin-right:10px; display:inline;">Create Account</button>

    </EditForm>
</div>

@code {
    // Create a way to communicate with the database
    // Create the model for the register form
    private RegisterModel formModel = new();
    static HttpClient dbClient = new HttpClient();

    private void HandleSubmit()
    {
        if (GetUserAsync(formModel.Username) != null)
        {
            MessageBox.Show("Username already taken.", "Error", MessageBoxButton.OK);
            formModel = new();
            return;
        }
        // Causes deadlock. Need to change the data service methods to not conflict with the UI
        try
        {
            CreateUserAsync(new UserData { UserName = formModel.Username, Password = formModel.Password, ActivityString = "" });
        } catch (Exception)
        {
            this.formModel = new();
            return;
        }

        NavManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        dbClient.BaseAddress = new Uri("http://localhost:5098/");
        dbClient.DefaultRequestHeaders.Accept.Clear();
        dbClient.DefaultRequestHeaders.Accept.Add(
                new MediaTypeWithQualityHeaderValue("application/json"));
    }

    static async void CreateUserAsync(UserData newUser)
    {
        HttpResponseMessage response = await dbClient.PostAsJsonAsync(
            "api/userdata", newUser);
        response.EnsureSuccessStatusCode();
    }

    static async Task<UserData> GetUserAsync(string username)
    {
        UserData potentialUser = null;
        HttpResponseMessage response = await dbClient.GetAsync($"api/userdata/{username}");
        if (response.IsSuccessStatusCode)
        {
            potentialUser = await response.Content.ReadAsAsync<UserData>();
        }
        return potentialUser;
    }
}
